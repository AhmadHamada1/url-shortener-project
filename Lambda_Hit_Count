import json
import boto3
from datetime import datetime
import uuid

# Initialize AWS services
dynamodb = boto3.resource('dynamodb', region_name='me-south-1')
s3 = boto3.client('s3')

# Constants
TABLE_URLS = 'UrlShortener'  # DynamoDB table for storing URL mappings
TABLE_LOGS = 'UrlClickLogs'  # DynamoDB table for logging clicks
S3_BUCKET_NAME = 'buraq-shorten-url'  # S3 bucket for logs

def lambda_handler(event, context):
    try:
        # Extract the short ID from the path parameter
        short_id = event['pathParameters']['short_id']
        headers = event.get('headers', {})

        # Extract IP address and User-Agent from the headers
        ip_address = headers.get('X-Forwarded-For', 'unknown').split(',')[0]
        user_agent = headers.get('User-Agent', 'unknown')

        # Look up the long URL from DynamoDB using the short ID
        url_table = dynamodb.Table(TABLE_URLS)
        response = url_table.get_item(Key={'short_id': short_id})

        # If the short ID doesn't exist, return an error response
        if 'Item' not in response:
            return {
                'statusCode': 404,
                'body': json.dumps({'error': 'Short URL not found'})
            }

        # Get the long URL from the response
        long_url = response['Item']['long_url']

        # Increment the click count in DynamoDB
        url_table.update_item(
            Key={'short_id': short_id},
            UpdateExpression="SET clicks = if_not_exists(clicks, :start) + :inc",
            ExpressionAttributeValues={
                ':start': 0,
                ':inc': 1
            }
        )

        # Log the click details (IP, User-Agent, and timestamp) in DynamoDB
        logs_table = dynamodb.Table(TABLE_LOGS)
        log_item = {
            'short_id': short_id,
            'timestamp': datetime.utcnow().isoformat(),
            'ip_address': ip_address,
            'user_agent': user_agent
        }
        logs_table.put_item(Item=log_item)

        # Optionally upload the log to S3
        log_file_name = f"logs/{short_id}/{datetime.utcnow().strftime('%Y-%m-%d')}/click_{str(uuid.uuid4())}.json"
        s3.put_object(
            Bucket=S3_BUCKET_NAME,
            Key=log_file_name,
            Body=json.dumps(log_item),
            ContentType='application/json'
        )


        # Redirect the user to the long URL
        return {
            'statusCode': 302,
            'headers': {'Location': long_url}
        }

    except Exception as e:
        return {
            'statusCode': 500,
            'body': json.dumps({'error': str(e)})
        }
